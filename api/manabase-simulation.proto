
syntax = "proto3";

package manabase_simulation;
option go_package = "manabase-simulation/api";

import "api/grpc-graphql-gateway/include/graphql/graphql.proto";

service ManabaseSimulator {
  option (graphql.service) = {
    host: "mtg-mana-sim-app-server-service:9000"
    insecure: true
  };

  rpc Echo(EchoRequest) returns (EchoResponse) {
    option (graphql.schema) = {
      type: QUERY   // declare as Query
      name: "echo" // query name
    };
  };

  // SimulateDeck simulates a deck against a given objective with the provided configuration.
  rpc SimulateDeck(SimulateDeckRequest) returns (SimulateDeckResponse) {
    option (graphql.schema) = {
      type: QUERY   // declare as Query
      name: "simulate" // query name
    };
  };

  // ValidateDeckList validates a deckList is allowed to be played and can be simulated.
  rpc ValidateDeckList(ValidateDeckListRequest) returns (ValidateDeckListResponse) {
    option (graphql.schema) = {
      type: QUERY
      name: "validate"
    };
  };
}

message EchoRequest {
  string message = 1;
}

message EchoResponse {
  string message = 1;
}

// SimulateDeckRequest Represents the request to simulate a deck.
message SimulateDeckRequest {
  string deckList = 1;
  GameConfiguration gameConfiguration = 2;
  Objective objective = 3;
}

message SimulateDeckResponse {
  string message = 1;
  float successRate = 2;
  repeated ResultCheckpoint checkpoints = 3;
  DeckStats deckStats = 4;
}

message ValidateDeckListRequest {
  string deckList = 1;
}

message ValidateDeckListResponse {
  bool isValid = 1;
  repeated InvalidCard invalidCards = 2;
}

message InvalidCard {
  string name = 1;
  string reason = 2;
}

message ManaCost {
  repeated ManaColor colorRequirements = 1;
  int32 genericCost = 2;
}

message SimplifiedManaCost {
  int32 whiteMana = 1;
  int32 blueMana = 2;
  int32 blackMana = 3;
  int32 redMana = 4;
  int32 greenMana = 5;
  int32 colorlessMana = 6;
  int32 genericCost = 7;
}

enum ManaColor {
  WHITE = 0;
  BLUE = 1;
  BLACK = 2;
  RED = 3;
  GREEN = 4;
  COLORLESS = 5;
}

message Objective {
  int32 targetTurn = 1;
  repeated ManaCost manaCosts = 2;
}

message GameConfiguration {
  int32 initialHandSize = 1;
  int32 cardsDrawnPerTurn = 2;
  bool onThePlay = 3;
}

message ResultCheckpoint {
  int32 iterations = 1;
  int32 successes = 2;
}

message DeckStats {
  int32 totalCards = 1;
  int32 lands = 2;
  int32 nonLands = 3;
  SimplifiedManaCost totalManaPips = 4;
}
